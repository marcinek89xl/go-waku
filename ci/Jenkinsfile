library 'status-jenkins-lib@v1.4.3'

pipeline {
  agent { label 'linux' }

  options {
    timestamps()
    disableConcurrentBuilds()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 40, unit: 'MINUTES')
    /* Limit builds retained */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
      artifactNumToKeepStr: '10',
    ))
  }

  /* WARNING: Defining parameters here with the ?: trick causes them to remember last value. */
  parameters { 
    booleanParam(
      name: 'PUBLISH',
      description: 'Trigger publishing of build results for nightly or release.',
      defaultValue: getPublishDefault(params.PUBLISH),
    )
  }

  stages {
    stage('Build') {
      parallel {
        stage('iOS') { steps { script {
          ios = jenkins.Build('go-waku/platforms/ios')
        } } }
        stage('Android') { steps { script {
          android = jenkins.Build('go-waku/platforms/android')
        } } }
      }
    }
    stage('Archive') {
      steps { script {
        sh('rm -f pkg/*')
        jenkins.copyArts(ios)
        jenkins.copyArts(android)
        sha = "pkg/${utils.pkgFilename(ext: 'sha256')}"
        dir('pkg') {
          /* generate sha256 checksums for upload */
          sh "sha256sum * | tee ../${sha}"
          archiveArtifacts('*')
        }
      } }
    }
    stage('Upload') {
      steps { script {
        /* object for easier URLs handling */
        urls = [
          /* mobile */
          Android: utils.pkgUrl(android),
        //  iOS: utils.pkgUrl(ios),
          /* upload the sha256 checksums file too */
          SHA: s3.uploadArtifact(sha),
        ]
        /* add URLs to the build description */
        jenkins.setBuildDesc(urls)
      } }
    }
    stage('Publish') {
      when { expression { params.PUBLISH } }
      steps { script {
        github.publishReleaseFiles(repo: 'status-desktop');
      } }
    }
  }
}

/* Helper that generates list of available choices for a parameter
 * but re-orders them based on the currently set value. First is default. */
def List genChoices(String previousChoice, List defaultChoices) {
  if (previousChoice == null) {
     return defaultChoices
  }
  choices = defaultChoices.minus(previousChoice)
  choices.add(0, previousChoice)
  return choices
}

/* Helper that makes PUBLISH default to 'false' unless:
 * - The build is for a release branch
 * - A user explicitly specified a value
 * Since release builds create and re-create GitHub drafts every time. */
def Boolean getPublishDefault(Boolean previousValue) {
  if (env.JOB_NAME.startsWith('go-waku/release')) { return true }
  if (previousValue != null) { return previousValue }
  return false
}